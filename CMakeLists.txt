cmake_minimum_required(VERSION 2.8)

set(PNAME "main")

project("To Do List")

set (VERSION_MAJOR 1)
set (VERSION_MINOR 0)

set(MCU "MKL26Z64")
set(MCU_LD "../mkl26z64.ld")

set(CMAKE_C_FLAGS_COMMON "-nostdlib -Wall -Os -mcpu=cortex-m0 -mthumb -MMD  -I.")
set(CMAKE_C_FLAGS_COMMON "${CMAKE_C_FLAGS_COMMON} -D__MKL26Z64__ -D${MCU} -DF_CPU=48000000 -DUSB_SERIAL")

set(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} -g ${CMAKE_C_FLAGS_COMMON}")
set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} -DNDEBUG ${CMAKE_C_FLAGS_COMMON}")

set(CMAKE_CXX_FLAGS_COMMON "-std=gnu++0x -felide-constructors -fno-exceptions -fno-rtti")
set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} ${CMAKE_CXX_FLAGS_COMMON}")
set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} ${CMAKE_CXX_FLAGS_COMMON}")

set(CMAKE_EXE_LINKER_FLAGS_COMMON "-Os -Wl,--gc-sections,--defsym=__rtc_localtime=0 --specs=nano.specs MKL03Z32xxx4_flash.ld -static")
set(CMAKE_EXE_LINKER_FLAGS_COMMON "${CMAKE_EXE_LINKER_FLAGS_COMMON} -mcpu=cortex-m4 -mthumb -T${MCU_LD}")

set(CMAKE_EXE_LINKER_FLAGS_DEBUG "${CMAKE_EXE_LINKER_FLAGS_DEBUG} ${CMAKE_EXE_LINKER_FLAGS_COMMON}")
set(CMAKE_EXE_LINKER_FLAGS_RELEASE "${CMAKE_EXE_LINKER_FLAGS_RELEASE} ${CMAKE_EXE_LINKER_FLAGS_COMMON}")

set(CMAKE_ASM_FLAGS_COMMON "-mcpu=cortex-m0plus  -mthumb  -Wall  -fno-common  -ffunction-sections  -fdata-sections")
set(CMAKE_ASM_FLAGS_COMMON "${CMAKE_ASM_FLAGS_COMMON} -ffreestanding  -fno-builtin  -mapcs  -std=gnu99")

set(CMAKE_ASM_FLAGS_DEBUG "${CMAKE_ASM_FLAGS_DEBUG} -g  ${CMAKE_ASM_FLAGS_COMMON}")
set(CMAKE_ASM_FLAGS_RELEASE "${CMAKE_ASM_FLAGS_RELEASE} -DNDEBUG ${CMAKE_ASM_FLAGS_COMMON}")

# MAP FILE
set(CMAKE_EXE_LINKER_FLAGS_DEBUG "${CMAKE_EXE_LINKER_FLAGS_DEBUG}  -Xlinker -Map=debug/${PNAME}.map")
set(CMAKE_EXE_LINKER_FLAGS_RELEASE "${CMAKE_EXE_LINKER_FLAGS_RELEASE}  -Xlinker -Map=release/${PNAME}.map")

add_executable(${PNAME}.elf assert.c  pins_teensy.c mk20dx128.c main.cpp)

# BIN AND HEX
add_custom_command(TARGET ${PNAME}.elf POST_BUILD COMMAND ${CMAKE_OBJCOPY} -Oihex ${EXECUTABLE_OUTPUT_PATH}/${PNAME}.elf ${EXECUTABLE_OUTPUT_PATH}/${PNAME}.hex)
add_custom_command(TARGET ${PNAME}.elf POST_BUILD COMMAND ${CMAKE_OBJCOPY} -Obinary ${EXECUTABLE_OUTPUT_PATH}/${PNAME}.elf ${EXECUTABLE_OUTPUT_PATH}/${PNAME}.bin)
add_custom_command(TARGET ${PNAME}.elf POST_BUILD COMMAND ${CMAKE_OBJSIZE} ${EXECUTABLE_OUTPUT_PATH}/${PNAME}.elf)




